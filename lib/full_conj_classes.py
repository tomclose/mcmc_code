import numpy as np
import state as st
import csv

def bitsum(x):
    if x not in mem:
        mem[x] = bin(x).count('1')
    return mem[x]

def errors_to_n(state):
    ans = 0
    l = 0
    for i,j in state.qubit_indices:
        ans += (state._array[i,j] << 2*l)
        l += 1
    return ans

def set_state_errors(state, n):
    l = 0
    for i, j in state.qubit_indices:
        # find the bits at position 2*l and 2*l+!
        # counting from the least significant bit
        e = (n & (3 << 2*l)) >> 2*l
        state.set_qubit(i, j, e)
        l += 1
    return state

def stab_action_for_site(state, n):
    """
    Return integer representing the action of the nth stabiliser on the qubits

    n is counted from the top left corner (not that this really matters)"""
    # Zero our state just in case
    set_state_errors(state, 0)
    # Apply the appropriate stabiliser
    state.apply_stabiliser(*state.stabiliser_indices[n])
    return errors_to_n(state)

def class_candidate(state, class_n):
    """
    Return an integer representing a state in the error class class_n relative
    to the zero state

    0 <= class_n < 16

    """
    # Zero our state just in case
    set_state_errors(state, 0)
    # Generate class member
    state.change_state(class_n)
    return errors_to_n(state)

def bare_stabiliser_actions(n):
    """
    Returns a numpy array of integers representing error configurations
    generated by action of the bare stabilisers.

    """
    s = st.ToricLattice(n)
    n_bare = n**2/2 - 2
    a = np.zeros(n_bare, dtype='int64')
    for i in range(n_bare):
        a[i] = stab_action_for_site(s, i)
    return a


def composite_stabiliser_actions(n, bare_stab_actions=None):
    """
    Returns a numpy array of integers representing error configurations
    generated by action of the composite stabilisers.

    """
    bare_stabiliser_actions = [stab_action_for_site(s, i) for i in range(n**2-2)]
    n_composites = 2**((n/2)**2-2)
    a = np.zeros(n_composites, dtype='int64')
    for i in range(n_composites):
        
        a[i] = stab_action_for_site(s, i)
    return a

 
